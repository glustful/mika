//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.miicaa.detail;

import java.util.ArrayList;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import com.miicaa.detail.DetailProgressFragment.PrgressDoPeople;
import com.miicaa.home.R.layout;
import com.miicaa.home.data.business.matter.MatterInfo;
import com.miicaa.home.data.net.ResponseData;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class DetailProgressFragment_
    extends DetailProgressFragment
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    public final static String OPERATE_GROUP_ARG = "operateGroup";
    public final static String DATA_ID_ARG = "dataId";
    public final static String M_INFO_ARG = "mInfo";
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    public View findViewById(int id) {
        if (contentView_ == null) {
            return null;
        }
        return contentView_.findViewById(id);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(layout.matter_do_progress, container, false);
        }
        return contentView_;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        injectFragmentArguments_();
        afterInject();
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static DetailProgressFragment_.FragmentBuilder_ builder() {
        return new DetailProgressFragment_.FragmentBuilder_();
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        nodo = ((ImageView) hasViews.findViewById(com.miicaa.home.R.id.nodoLayout));
        doingView = ((TextView) hasViews.findViewById(com.miicaa.home.R.id.matterDoing));
        gridview = ((MyGridView) hasViews.findViewById(com.miicaa.home.R.id.grid));
        done = ((ImageView) hasViews.findViewById(com.miicaa.home.R.id.doneLayout));
        headName = ((TextView) hasViews.findViewById(com.miicaa.home.R.id.head_name));
        headImg = ((ImageView) hasViews.findViewById(com.miicaa.home.R.id.head_img));
        completeView = ((TextView) hasViews.findViewById(com.miicaa.home.R.id.matterComplete));
        listview = ((DetailProgressListView) hasViews.findViewById(com.miicaa.home.R.id.progressList));
        todo = ((ImageView) hasViews.findViewById(com.miicaa.home.R.id.todoLayout));
        noDoView = ((TextView) hasViews.findViewById(com.miicaa.home.R.id.matterNodo));
        {
            View view = hasViews.findViewById(com.miicaa.home.R.id.matterDoing);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        DetailProgressFragment_.this.todoClick();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.miicaa.home.R.id.matterNodo);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        DetailProgressFragment_.this.nodoClick();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(com.miicaa.home.R.id.matterComplete);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        DetailProgressFragment_.this.doneClick();
                    }

                }
                );
            }
        }
        init();
    }

    private void injectFragmentArguments_() {
        Bundle args_ = getArguments();
        if (args_!= null) {
            if (args_.containsKey(OPERATE_GROUP_ARG)) {
                operateGroup = args_.getString(OPERATE_GROUP_ARG);
            }
            if (args_.containsKey(DATA_ID_ARG)) {
                dataId = args_.getString(DATA_ID_ARG);
            }
            if (args_.containsKey(M_INFO_ARG)) {
                mInfo = ((MatterInfo) args_.getSerializable(M_INFO_ARG));
            }
        }
    }

    @Override
    public void resetShow() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DetailProgressFragment_.super.resetShow();
            }

        }
        );
    }

    @Override
    public void showPeople(final int position, final View v) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DetailProgressFragment_.super.showPeople(position, v);
            }

        }
        );
    }

    @Override
    public void noshowPeople(final int position, final View v) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DetailProgressFragment_.super.noshowPeople(position, v);
            }

        }
        );
    }

    @Override
    public void toRemind() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DetailProgressFragment_.super.toRemind();
            }

        }
        );
    }

    @Override
    public void refreshGrid(final ArrayList<PrgressDoPeople> infos) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DetailProgressFragment_.super.refreshGrid(infos);
            }

        }
        );
    }

    @Override
    public void doneList() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DetailProgressFragment_.super.doneList();
            }

        }
        );
    }

    @Override
    public void numToDo(final ProgressTongjiInfo info) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DetailProgressFragment_.super.numToDo(info);
            }

        }
        );
    }

    @Override
    public void showGrid(final ImageView v) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DetailProgressFragment_.super.showGrid(v);
            }

        }
        );
    }

    @Override
    public void setProgressCountListener(final OnTabCountListener tabListener) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DetailProgressFragment_.super.setProgressCountListener(tabListener);
            }

        }
        );
    }

    @Override
    public void refreshlist(final ArrayList<ProgressListInfo> infos) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DetailProgressFragment_.super.refreshlist(infos);
            }

        }
        );
    }

    @Override
    public void todoList() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    DetailProgressFragment_.super.todoList();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void jsonToCache(final ResponseData data) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    DetailProgressFragment_.super.jsonToCache(data);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    @Override
    public void nodoList() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    DetailProgressFragment_.super.nodoList();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class FragmentBuilder_ {

        private Bundle args_;

        private FragmentBuilder_() {
            args_ = new Bundle();
        }

        public DetailProgressFragment build() {
            DetailProgressFragment_ fragment_ = new DetailProgressFragment_();
            fragment_.setArguments(args_);
            return fragment_;
        }

        public DetailProgressFragment_.FragmentBuilder_ operateGroup(String operateGroup) {
            args_.putString(OPERATE_GROUP_ARG, operateGroup);
            return this;
        }

        public DetailProgressFragment_.FragmentBuilder_ dataId(String dataId) {
            args_.putString(DATA_ID_ARG, dataId);
            return this;
        }

        public DetailProgressFragment_.FragmentBuilder_ mInfo(MatterInfo mInfo) {
            args_.putSerializable(M_INFO_ARG, mInfo);
            return this;
        }

    }

}
