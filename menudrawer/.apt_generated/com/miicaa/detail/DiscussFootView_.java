//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.miicaa.detail;

import android.content.Context;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.view.ViewPager;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.miicaa.home.R.id;
import com.miicaa.home.R.layout;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 * 
 */
@SuppressWarnings("unused")
public final class DiscussFootView_
    extends DiscussFootView
    implements HasViews, OnViewChangedListener
{

    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    public DiscussFootView_(Context context) {
        super(context);
        init_();
    }

    public DiscussFootView_(Context context, AttributeSet attrs) {
        super(context, attrs);
        init_();
    }

    public DiscussFootView_(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        init_();
    }

    public static DiscussFootView build(Context context) {
        DiscussFootView_ instance = new DiscussFootView_(context);
        instance.onFinishInflate();
        return instance;
    }

    /**
     * The mAlreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <merge /> tag.
     * 
     */
    @Override
    public void onFinishInflate() {
        if (!alreadyInflated_) {
            alreadyInflated_ = true;
            inflate(getContext(), layout.discuss_foot_view, this);
            onViewChangedNotifier_.notifyViewChanged(this);
        }
        super.onFinishInflate();
    }

    private void init_() {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    public static DiscussFootView build(Context context, AttributeSet attrs) {
        DiscussFootView_ instance = new DiscussFootView_(context, attrs);
        instance.onFinishInflate();
        return instance;
    }

    public static DiscussFootView build(Context context, AttributeSet attrs, int defStyle) {
        DiscussFootView_ instance = new DiscussFootView_(context, attrs, defStyle);
        instance.onFinishInflate();
        return instance;
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        expreButton = ((ImageButton) hasViews.findViewById(id.expreButton));
        atButton = ((ImageButton) hasViews.findViewById(id.atButton));
        add = ((ImageView) hasViews.findViewById(id.add));
        expressLayout = ((LinearLayout) hasViews.findViewById(id.expressLayout));
        function = ((LinearLayout) hasViews.findViewById(id.function));
        express = ((LinearLayout) hasViews.findViewById(id.express));
        expressPage = ((ViewPager) hasViews.findViewById(id.expressPage));
        input = ((EditText) hasViews.findViewById(id.input));
        {
            View view = hasViews.findViewById(id.atButton);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        DiscussFootView_.this.atButtonClick();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.add);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        DiscussFootView_.this.addClick();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.expreButton);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        DiscussFootView_.this.expreButtonClick();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.send);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        DiscussFootView_.this.sendClick();
                    }

                }
                );
            }
        }
        {
            final TextView view = ((TextView) hasViews.findViewById(id.input));
            if (view!= null) {
                view.addTextChangedListener(new TextWatcher() {


                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                    }

                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        DiscussFootView_.this.textchange();
                    }

                    @Override
                    public void afterTextChanged(Editable s) {
                    }

                }
                );
            }
        }
        afterview();
    }

    @Override
    public void initExpresGrid() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                DiscussFootView_.super.initExpresGrid();
            }

        }
        );
    }

}
