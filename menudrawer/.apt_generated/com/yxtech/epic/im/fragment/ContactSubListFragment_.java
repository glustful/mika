//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.yxst.epic.yixin.fragment;

import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import com.miicaa.home.R.layout;
import com.yxst.epic.yixin.adapter.ContactListAdapter_;
import com.yxst.epic.yixin.data.dto.model.Member;
import com.yxst.epic.yixin.data.dto.response.GetOrgUserListResponse;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;
import org.springframework.web.client.RestClientException;
import za.co.immedia.pinnedheaderlistview.PinnedHeaderListView;

public final class ContactSubListFragment_
    extends ContactSubListFragment
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private View contentView_;
    public final static String MEMBER_ARG = "Member";
    public final static String IS_SELECT_MODE_ARG = "isSelectMode";
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    public View findViewById(int id) {
        if (contentView_ == null) {
            return null;
        }
        return contentView_.findViewById(id);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        contentView_ = super.onCreateView(inflater, container, savedInstanceState);
        if (contentView_ == null) {
            contentView_ = inflater.inflate(layout.fragment_contact_sub_list, container, false);
        }
        return contentView_;
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        injectFragmentArguments_();
        mContactSubListAdapter = ContactListAdapter_.getInstance_(getActivity());
        afterInject();
    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ContactSubListFragment_.FragmentBuilder_ builder() {
        return new ContactSubListFragment_.FragmentBuilder_();
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        mPinnedHeaderListView = ((PinnedHeaderListView) hasViews.findViewById(android.R.id.list));
        afterViews();
    }

    private void injectFragmentArguments_() {
        Bundle args_ = getArguments();
        if (args_!= null) {
            if (args_.containsKey(MEMBER_ARG)) {
                member = ((Member) args_.getSerializable(MEMBER_ARG));
            }
            if (args_.containsKey(IS_SELECT_MODE_ARG)) {
                isSelectMode = args_.getBoolean(IS_SELECT_MODE_ARG);
            }
        }
    }

    @Override
    public void onRestClientExceptionThrown(final RestClientException e) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ContactSubListFragment_.super.onRestClientExceptionThrown(e);
            }

        }
        );
    }

    @Override
    public void onPreExecute() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ContactSubListFragment_.super.onPreExecute();
            }

        }
        );
    }

    @Override
    public void onPostExecut(final GetOrgUserListResponse response) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ContactSubListFragment_.super.onPostExecut(response);
            }

        }
        );
    }

    @Override
    public void doInBackground() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("getOrgUserList", 0, "") {


            @Override
            public void execute() {
                try {
                    ContactSubListFragment_.super.doInBackground();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class FragmentBuilder_ {

        private Bundle args_;

        private FragmentBuilder_() {
            args_ = new Bundle();
        }

        public ContactSubListFragment build() {
            ContactSubListFragment_ fragment_ = new ContactSubListFragment_();
            fragment_.setArguments(args_);
            return fragment_;
        }

        public ContactSubListFragment_.FragmentBuilder_ member(Member member) {
            args_.putSerializable(MEMBER_ARG, member);
            return this;
        }

        public ContactSubListFragment_.FragmentBuilder_ isSelectMode(boolean isSelectMode) {
            args_.putBoolean(IS_SELECT_MODE_ARG, isSelectMode);
            return this;
        }

    }

}
