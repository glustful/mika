package com.yxst.epic.yixin.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.yxst.epic.yixin.db.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MESSAGE.
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Mid = new Property(1, Long.class, "Mid", false, "MID");
        public final static Property Gid = new Property(2, Long.class, "Gid", false, "GID");
        public final static Property MsgId = new Property(3, String.class, "MsgId", false, "MSG_ID");
        public final static Property ClientMsgId = new Property(4, String.class, "ClientMsgId", false, "CLIENT_MSG_ID");
        public final static Property FromUserName = new Property(5, String.class, "FromUserName", false, "FROM_USER_NAME");
        public final static Property ToUserName = new Property(6, String.class, "ToUserName", false, "TO_USER_NAME");
        public final static Property MsgType = new Property(7, Integer.class, "MsgType", false, "MSG_TYPE");
        public final static Property Content = new Property(8, String.class, "Content", false, "CONTENT");
        public final static Property ObjectContent = new Property(9, String.class, "ObjectContent", false, "OBJECT_CONTENT");
        public final static Property CreateTime = new Property(10, Long.class, "CreateTime", false, "CREATE_TIME");
        public final static Property MediaId = new Property(11, String.class, "MediaId", false, "MEDIA_ID");
        public final static Property Url = new Property(12, String.class, "Url", false, "URL");
        public final static Property ExtLocalUserName = new Property(13, String.class, "extLocalUserName", false, "EXT_LOCAL_USER_NAME");
        public final static Property ExtRemoteUserName = new Property(14, String.class, "extRemoteUserName", false, "EXT_REMOTE_USER_NAME");
        public final static Property ExtRemoteDisplayName = new Property(15, String.class, "extRemoteDisplayName", false, "EXT_REMOTE_DISPLAY_NAME");
        public final static Property ExtInOut = new Property(16, Integer.class, "extInOut", false, "EXT_IN_OUT");
        public final static Property ExtTime = new Property(17, Long.class, "extTime", false, "EXT_TIME");
        public final static Property ExtRead = new Property(18, Integer.class, "extRead", false, "EXT_READ");
        public final static Property ExtStatus = new Property(19, Integer.class, "extStatus", false, "EXT_STATUS");
    };


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'MID' INTEGER," + // 1: Mid
                "'GID' INTEGER," + // 2: Gid
                "'MSG_ID' TEXT," + // 3: MsgId
                "'CLIENT_MSG_ID' TEXT," + // 4: ClientMsgId
                "'FROM_USER_NAME' TEXT," + // 5: FromUserName
                "'TO_USER_NAME' TEXT," + // 6: ToUserName
                "'MSG_TYPE' INTEGER," + // 7: MsgType
                "'CONTENT' TEXT," + // 8: Content
                "'OBJECT_CONTENT' TEXT," + // 9: ObjectContent
                "'CREATE_TIME' INTEGER," + // 10: CreateTime
                "'MEDIA_ID' TEXT," + // 11: MediaId
                "'URL' TEXT," + // 12: Url
                "'EXT_LOCAL_USER_NAME' TEXT," + // 13: extLocalUserName
                "'EXT_REMOTE_USER_NAME' TEXT NOT NULL ," + // 14: extRemoteUserName
                "'EXT_REMOTE_DISPLAY_NAME' TEXT," + // 15: extRemoteDisplayName
                "'EXT_IN_OUT' INTEGER," + // 16: extInOut
                "'EXT_TIME' INTEGER," + // 17: extTime
                "'EXT_READ' INTEGER," + // 18: extRead
                "'EXT_STATUS' INTEGER);"); // 19: extStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long Mid = entity.getMid();
        if (Mid != null) {
            stmt.bindLong(2, Mid);
        }
 
        Long Gid = entity.getGid();
        if (Gid != null) {
            stmt.bindLong(3, Gid);
        }
 
        String MsgId = entity.getMsgId();
        if (MsgId != null) {
            stmt.bindString(4, MsgId);
        }
 
        String ClientMsgId = entity.getClientMsgId();
        if (ClientMsgId != null) {
            stmt.bindString(5, ClientMsgId);
        }
 
        String FromUserName = entity.getFromUserName();
        if (FromUserName != null) {
            stmt.bindString(6, FromUserName);
        }
 
        String ToUserName = entity.getToUserName();
        if (ToUserName != null) {
            stmt.bindString(7, ToUserName);
        }
 
        Integer MsgType = entity.getMsgType();
        if (MsgType != null) {
            stmt.bindLong(8, MsgType);
        }
 
        String Content = entity.getContent();
        if (Content != null) {
            stmt.bindString(9, Content);
        }
 
        String ObjectContent = entity.getObjectContent();
        if (ObjectContent != null) {
            stmt.bindString(10, ObjectContent);
        }
 
        Long CreateTime = entity.getCreateTime();
        if (CreateTime != null) {
            stmt.bindLong(11, CreateTime);
        }
 
        String MediaId = entity.getMediaId();
        if (MediaId != null) {
            stmt.bindString(12, MediaId);
        }
 
        String Url = entity.getUrl();
        if (Url != null) {
            stmt.bindString(13, Url);
        }
 
        String extLocalUserName = entity.getExtLocalUserName();
        if (extLocalUserName != null) {
            stmt.bindString(14, extLocalUserName);
        }
        stmt.bindString(15, entity.getExtRemoteUserName());
 
        String extRemoteDisplayName = entity.getExtRemoteDisplayName();
        if (extRemoteDisplayName != null) {
            stmt.bindString(16, extRemoteDisplayName);
        }
 
        Integer extInOut = entity.getExtInOut();
        if (extInOut != null) {
            stmt.bindLong(17, extInOut);
        }
 
        Long extTime = entity.getExtTime();
        if (extTime != null) {
            stmt.bindLong(18, extTime);
        }
 
        Integer extRead = entity.getExtRead();
        if (extRead != null) {
            stmt.bindLong(19, extRead);
        }
 
        Integer extStatus = entity.getExtStatus();
        if (extStatus != null) {
            stmt.bindLong(20, extStatus);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // Mid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // Gid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // MsgId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ClientMsgId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // FromUserName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ToUserName
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // MsgType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Content
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ObjectContent
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // CreateTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // MediaId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Url
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // extLocalUserName
            cursor.getString(offset + 14), // extRemoteUserName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // extRemoteDisplayName
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // extInOut
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // extTime
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // extRead
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19) // extStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setGid(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMsgId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClientMsgId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFromUserName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setToUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMsgType(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setContent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setObjectContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setMediaId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExtLocalUserName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setExtRemoteUserName(cursor.getString(offset + 14));
        entity.setExtRemoteDisplayName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setExtInOut(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setExtTime(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setExtRead(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setExtStatus(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
