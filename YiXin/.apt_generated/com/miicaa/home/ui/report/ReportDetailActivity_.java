//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.miicaa.home.ui.report;

import java.util.HashMap;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.miicaa.detail.DetailScrollView;
import com.miicaa.detail.DiscussFootView;
import com.miicaa.detail.ProgressFootView;
import com.miicaa.home.R.id;
import com.miicaa.home.R.layout;
import com.yxst.epic.yixin.view.ResizeLayout;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class ReportDetailActivity_
    extends ReportDetailActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    public final static String IS_PUSH_MESSAGE_EXTRA = "isPushMessage";
    public final static String DATA_ID_EXTRA = "dataId";
    public final static String IS_DISCOVER_EXTRA = "isDiscover";
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.report_detail_activity);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        injectExtras_();
        initData();
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static ReportDetailActivity_.IntentBuilder_ intent(Context context) {
        return new ReportDetailActivity_.IntentBuilder_(context);
    }

    public static ReportDetailActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new ReportDetailActivity_.IntentBuilder_(fragment);
    }

    public static ReportDetailActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new ReportDetailActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        scrollview = ((DetailScrollView) hasViews.findViewById(id.scrollview));
        content = ((LinearLayout) hasViews.findViewById(id.report_detail_content));
        topTab = ((RelativeLayout) hasViews.findViewById(id.holdTopTab));
        footer = ((LinearLayout) hasViews.findViewById(id.footer));
        title = ((TextView) hasViews.findViewById(id.matter_detail_title));
        more = ((RelativeLayout) hasViews.findViewById(id.more));
        manualTab = ((RelativeLayout) hasViews.findViewById(id.manualTab));
        discussFoot = ((DiscussFootView) hasViews.findViewById(id.discussFoot));
        whole = ((ResizeLayout) hasViews.findViewById(id.whole));
        progressFoot = ((ProgressFootView) hasViews.findViewById(id.progressFoot));
        {
            View view = hasViews.findViewById(id.moreButton);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReportDetailActivity_.this.more();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.cancleButton);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        ReportDetailActivity_.this.cancel();
                    }

                }
                );
            }
        }
        initUI();
    }

    private void injectExtras_() {
        Bundle extras_ = getIntent().getExtras();
        if (extras_!= null) {
            if (extras_.containsKey(IS_PUSH_MESSAGE_EXTRA)) {
                isPushMessage = extras_.getBoolean(IS_PUSH_MESSAGE_EXTRA);
            }
            if (extras_.containsKey(DATA_ID_EXTRA)) {
                dataId = extras_.getString(DATA_ID_EXTRA);
            }
            if (extras_.containsKey(IS_DISCOVER_EXTRA)) {
                isDiscover = extras_.getBoolean(IS_DISCOVER_EXTRA);
            }
        }
    }

    @Override
    public void setIntent(Intent newIntent) {
        super.setIntent(newIntent);
        injectExtras_();
    }

    @Override
    public void toRemind(final HashMap<String, String> params) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                ReportDetailActivity_.super.toRemind(params);
            }

        }
        );
    }

    @Override
    public void toRemindTo(final ReportDetailInfo mInfo) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    ReportDetailActivity_.super.toRemindTo(mInfo);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;
        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, ReportDetailActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            fragment_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, ReportDetailActivity_.class);
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            fragmentSupport_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, ReportDetailActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public ReportDetailActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent_, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent_, requestCode);
                } else {
                    if (context_ instanceof Activity) {
                        ((Activity) context_).startActivityForResult(intent_, requestCode);
                    } else {
                        context_.startActivity(intent_);
                    }
                }
            }
        }

        public ReportDetailActivity_.IntentBuilder_ isPushMessage(boolean isPushMessage) {
            intent_.putExtra(IS_PUSH_MESSAGE_EXTRA, isPushMessage);
            return this;
        }

        public ReportDetailActivity_.IntentBuilder_ dataId(String dataId) {
            intent_.putExtra(DATA_ID_EXTRA, dataId);
            return this;
        }

        public ReportDetailActivity_.IntentBuilder_ isDiscover(boolean isDiscover) {
            intent_.putExtra(IS_DISCOVER_EXTRA, isDiscover);
            return this;
        }

    }

}
