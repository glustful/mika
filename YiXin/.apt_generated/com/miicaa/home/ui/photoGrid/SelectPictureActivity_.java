//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.miicaa.home.ui.photoGrid;

import java.io.Serializable;
import java.util.ArrayList;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.support.v4.view.ViewPager;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.miicaa.home.R.id;
import com.miicaa.home.R.layout;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class SelectPictureActivity_
    extends SelectPictureActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    public final static String IMAGE_ITEM_EXTRA = "imageItem";
    public final static String IS_YULAN_EXTRA = "isYulan";
    public final static String M_COUNT_EXTRA = "mCount";
    public final static String NO_OPERATION_EXTRA = "noOperation";
    public final static String IS_SAVE_EXTRA = "isSave";
    public final static String IMAGE_ITEMS_EXTRA = "imageItems";
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.activity_photo_check);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        injectExtras_();
        afterInject();
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static SelectPictureActivity_.IntentBuilder_ intent(Context context) {
        return new SelectPictureActivity_.IntentBuilder_(context);
    }

    public static SelectPictureActivity_.IntentBuilder_ intent(android.app.Fragment fragment) {
        return new SelectPictureActivity_.IntentBuilder_(fragment);
    }

    public static SelectPictureActivity_.IntentBuilder_ intent(android.support.v4.app.Fragment supportFragment) {
        return new SelectPictureActivity_.IntentBuilder_(supportFragment);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        selectView = ((PictureSelectView) hasViews.findViewById(id.selectView));
        titleText = ((TextView) hasViews.findViewById(id.title));
        saveButton = ((Button) hasViews.findViewById(id.save_big_picture));
        headView = ((RelativeLayout) hasViews.findViewById(id.headView));
        viewPager = ((ViewPager) hasViews.findViewById(id.photo_check_pager));
        backButton = ((Button) hasViews.findViewById(id.big_picture_back_button));
        {
            View view = hasViews.findViewById(id.save_big_picture);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        SelectPictureActivity_.this.saveClick(view);
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.big_picture_back_button);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        SelectPictureActivity_.this.backClick();
                    }

                }
                );
            }
        }
        aferView();
    }

    private void injectExtras_() {
        Bundle extras_ = getIntent().getExtras();
        if (extras_!= null) {
            if (extras_.containsKey(IMAGE_ITEM_EXTRA)) {
                imageItem = ((ImageItem) extras_.getSerializable(IMAGE_ITEM_EXTRA));
            }
            if (extras_.containsKey(IS_YULAN_EXTRA)) {
                isYulan = ((Boolean) extras_.getSerializable(IS_YULAN_EXTRA));
            }
            if (extras_.containsKey(M_COUNT_EXTRA)) {
                mCount = extras_.getInt(M_COUNT_EXTRA);
            }
            if (extras_.containsKey(NO_OPERATION_EXTRA)) {
                noOperation = extras_.getBoolean(NO_OPERATION_EXTRA);
            }
            if (extras_.containsKey(IS_SAVE_EXTRA)) {
                isSave = ((Boolean) extras_.getSerializable(IS_SAVE_EXTRA));
            }
            if (extras_.containsKey(IMAGE_ITEMS_EXTRA)) {
                imageItems = ((ArrayList<ImageItem> ) extras_.getSerializable(IMAGE_ITEMS_EXTRA));
            }
        }
    }

    @Override
    public void setIntent(Intent newIntent) {
        super.setIntent(newIntent);
        injectExtras_();
    }

    @Override
    public void refreshThis() {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                SelectPictureActivity_.super.refreshThis();
            }

        }
        );
    }

    @Override
    public void getBigPictureUriFromFile() {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    SelectPictureActivity_.super.getBigPictureUriFromFile();
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;
        private android.app.Fragment fragment_;
        private android.support.v4.app.Fragment fragmentSupport_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, SelectPictureActivity_.class);
        }

        public IntentBuilder_(android.app.Fragment fragment) {
            fragment_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, SelectPictureActivity_.class);
        }

        public IntentBuilder_(android.support.v4.app.Fragment fragment) {
            fragmentSupport_ = fragment;
            context_ = fragment.getActivity();
            intent_ = new Intent(context_, SelectPictureActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public SelectPictureActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (fragmentSupport_!= null) {
                fragmentSupport_.startActivityForResult(intent_, requestCode);
            } else {
                if (fragment_!= null) {
                    fragment_.startActivityForResult(intent_, requestCode);
                } else {
                    if (context_ instanceof Activity) {
                        ((Activity) context_).startActivityForResult(intent_, requestCode);
                    } else {
                        context_.startActivity(intent_);
                    }
                }
            }
        }

        public SelectPictureActivity_.IntentBuilder_ imageItem(ImageItem imageItem) {
            intent_.putExtra(IMAGE_ITEM_EXTRA, ((Serializable) imageItem));
            return this;
        }

        public SelectPictureActivity_.IntentBuilder_ isYulan(Boolean isYulan) {
            intent_.putExtra(IS_YULAN_EXTRA, ((Serializable) isYulan));
            return this;
        }

        public SelectPictureActivity_.IntentBuilder_ mCount(int mCount) {
            intent_.putExtra(M_COUNT_EXTRA, mCount);
            return this;
        }

        public SelectPictureActivity_.IntentBuilder_ noOperation(boolean noOperation) {
            intent_.putExtra(NO_OPERATION_EXTRA, noOperation);
            return this;
        }

        public SelectPictureActivity_.IntentBuilder_ isSave(Boolean isSave) {
            intent_.putExtra(IS_SAVE_EXTRA, ((Serializable) isSave));
            return this;
        }

        public SelectPictureActivity_.IntentBuilder_ imageItems(ArrayList<ImageItem> imageItems) {
            intent_.putExtra(IMAGE_ITEMS_EXTRA, ((Serializable) imageItems));
            return this;
        }

    }

}
